/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ApeAllowanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeAllowanceModule__factory>;
    getContractFactory(
      name: "ApeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeDistributor__factory>;
    getContractFactory(
      name: "ApeRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeRegistry__factory>;
    getContractFactory(
      name: "ApeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeRouter__factory>;
    getContractFactory(
      name: "FeeRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeRegistry__factory>;
    getContractFactory(
      name: "TimeLock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimeLock__factory>;
    getContractFactory(
      name: "ApeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeToken__factory>;
    getContractFactory(
      name: "TokenAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenAccessControl__factory>;
    getContractFactory(
      name: "AffiliateToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AffiliateToken__factory>;
    getContractFactory(
      name: "ApeVaultWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeVaultWrapper__factory>;
    getContractFactory(
      name: "ApeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeVaultFactory__factory>;
    getContractFactory(
      name: "BaseWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseWrapper__factory>;
    getContractFactory(
      name: "RegistryAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistryAPI__factory>;
    getContractFactory(
      name: "VaultAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultAPI__factory>;
    getContractFactory(
      name: "IApeVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IApeVault__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ApeAllowanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApeAllowanceModule>;
    getContractAt(
      name: "ApeDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApeDistributor>;
    getContractAt(
      name: "ApeRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApeRegistry>;
    getContractAt(
      name: "ApeRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApeRouter>;
    getContractAt(
      name: "FeeRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeRegistry>;
    getContractAt(
      name: "TimeLock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimeLock>;
    getContractAt(
      name: "ApeToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApeToken>;
    getContractAt(
      name: "TokenAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenAccessControl>;
    getContractAt(
      name: "AffiliateToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AffiliateToken>;
    getContractAt(
      name: "ApeVaultWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApeVaultWrapper>;
    getContractAt(
      name: "ApeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApeVaultFactory>;
    getContractAt(
      name: "BaseWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseWrapper>;
    getContractAt(
      name: "RegistryAPI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RegistryAPI>;
    getContractAt(
      name: "VaultAPI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultAPI>;
    getContractAt(
      name: "IApeVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IApeVault>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
