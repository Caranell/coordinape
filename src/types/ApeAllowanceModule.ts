/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export interface ApeAllowanceModuleInterface extends ethers.utils.Interface {
  functions: {
    'allowances(address,bytes32,address)': FunctionFragment;
    'currentAllowances(address,bytes32,address)': FunctionFragment;
    'setAllowance(bytes32,address,uint256,uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'allowances',
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'currentAllowances',
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'setAllowance',
    values: [BytesLike, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'allowances', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'currentAllowances',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAllowance',
    data: BytesLike
  ): Result;

  events: {
    'AllowanceUpdated(address,bytes32,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AllowanceUpdated'): EventFragment;
}

export type AllowanceUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    vault: string;
    circle: string;
    token: string;
    amount: BigNumber;
    interval: BigNumber;
  }
>;

export type AllowanceUpdatedEventFilter =
  TypedEventFilter<AllowanceUpdatedEvent>;

export interface ApeAllowanceModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ApeAllowanceModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { maxAmount: BigNumber; maxInterval: BigNumber }
    >;

    currentAllowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        intervalStart: BigNumber;
        epochs: BigNumber;
      }
    >;

    setAllowance(
      _circle: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _interval: BigNumberish,
      _epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowances(
    arg0: string,
    arg1: BytesLike,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { maxAmount: BigNumber; maxInterval: BigNumber }
  >;

  currentAllowances(
    arg0: string,
    arg1: BytesLike,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      debt: BigNumber;
      intervalStart: BigNumber;
      epochs: BigNumber;
    }
  >;

  setAllowance(
    _circle: BytesLike,
    _token: string,
    _amount: BigNumberish,
    _interval: BigNumberish,
    _epochs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { maxAmount: BigNumber; maxInterval: BigNumber }
    >;

    currentAllowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        intervalStart: BigNumber;
        epochs: BigNumber;
      }
    >;

    setAllowance(
      _circle: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _interval: BigNumberish,
      _epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AllowanceUpdated(address,bytes32,address,uint256,uint256)'(
      vault?: null,
      circle?: null,
      token?: null,
      amount?: null,
      interval?: null
    ): AllowanceUpdatedEventFilter;
    AllowanceUpdated(
      vault?: null,
      circle?: null,
      token?: null,
      amount?: null,
      interval?: null
    ): AllowanceUpdatedEventFilter;
  };

  estimateGas: {
    allowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentAllowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAllowance(
      _circle: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _interval: BigNumberish,
      _epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentAllowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAllowance(
      _circle: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _interval: BigNumberish,
      _epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
