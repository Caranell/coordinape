/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export interface ApeVaultFactoryInterface extends ethers.utils.Interface {
  functions: {
    'apeRegistry()': FunctionFragment;
    'createApeVault(address,address)': FunctionFragment;
    'vaultRegistry(address)': FunctionFragment;
    'yearnRegistry()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'apeRegistry',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'createApeVault',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'vaultRegistry',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'yearnRegistry',
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: 'apeRegistry',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createApeVault',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'vaultRegistry',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'yearnRegistry',
    data: BytesLike
  ): Result;

  events: {
    'VaultCreated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'VaultCreated'): EventFragment;
}

export type VaultCreatedEvent = TypedEvent<[string], { vault: string }>;

export type VaultCreatedEventFilter = TypedEventFilter<VaultCreatedEvent>;

export interface ApeVaultFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ApeVaultFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    apeRegistry(overrides?: CallOverrides): Promise<[string]>;

    createApeVault(
      _token: string,
      _simpleToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultRegistry(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    yearnRegistry(overrides?: CallOverrides): Promise<[string]>;
  };

  apeRegistry(overrides?: CallOverrides): Promise<string>;

  createApeVault(
    _token: string,
    _simpleToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultRegistry(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  yearnRegistry(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    apeRegistry(overrides?: CallOverrides): Promise<string>;

    createApeVault(
      _token: string,
      _simpleToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultRegistry(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    yearnRegistry(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'VaultCreated(address)'(vault?: null): VaultCreatedEventFilter;
    VaultCreated(vault?: null): VaultCreatedEventFilter;
  };

  estimateGas: {
    apeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    createApeVault(
      _token: string,
      _simpleToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultRegistry(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    yearnRegistry(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    apeRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createApeVault(
      _token: string,
      _simpleToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yearnRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
