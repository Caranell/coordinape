/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export interface RegistryAPIInterface extends ethers.utils.Interface {
  functions: {
    'governance()': FunctionFragment;
    'latestVault(address)': FunctionFragment;
    'numVaults(address)': FunctionFragment;
    'vaults(address,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'governance',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'latestVault', values: [string]): string;
  encodeFunctionData(functionFragment: 'numVaults', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'vaults',
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'latestVault',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'numVaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaults', data: BytesLike): Result;

  events: {};
}

export interface RegistryAPI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryAPIInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    governance(overrides?: CallOverrides): Promise<[string]>;

    latestVault(token: string, overrides?: CallOverrides): Promise<[string]>;

    numVaults(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    vaults(
      token: string,
      deploymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  governance(overrides?: CallOverrides): Promise<string>;

  latestVault(token: string, overrides?: CallOverrides): Promise<string>;

  numVaults(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  vaults(
    token: string,
    deploymentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    governance(overrides?: CallOverrides): Promise<string>;

    latestVault(token: string, overrides?: CallOverrides): Promise<string>;

    numVaults(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaults(
      token: string,
      deploymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    governance(overrides?: CallOverrides): Promise<BigNumber>;

    latestVault(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    numVaults(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaults(
      token: string,
      deploymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestVault(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numVaults(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaults(
      token: string,
      deploymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
